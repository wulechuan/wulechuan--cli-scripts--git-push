/**
 * @typedef {import('chalk').ChalkInstance} 范_粉笔工具
 */

/**
 * @typedef {import('../辅助工具集')} 范_本工具集随附之辅助工具集
 */

/**
 * @typedef {import('../../../package.json')} 范_本工具集自身的_packageJSON
 */





/**
 * @param {object}                        配置项集
 *
 * @param {范_粉笔工具}                   配置项集.粉笔工具
 * @param {string}                        配置项集.本工具集一切命令行消息之前缀
 * @param {范_本工具集随附之辅助工具集}   配置项集.本工具集随附之辅助工具集
 * @param {范_本工具集自身的_packageJSON} 配置项集.本工具集自身的_packageJSON
 */
module.exports = function 在命令行终端窗口打印本工具集之简介 ({
    粉笔工具,
    本工具集一切命令行消息之前缀,
    本工具集随附之辅助工具集,
    本工具集自身的_packageJSON,
} = {}) {
    if (!本工具集自身的_packageJSON) { return }

    const {
        排版好的内容全文: 排版后的描述文本全文,
        最终采纳的排版配置,
    } = 本工具集随附之辅助工具集.吴乐川对长文本进行排版({
        原始内容全文: 本工具集自身的_packageJSON.description,
        // 列表符号: '',
        // 单层缩进: '    ',
        整体缩进级数: 1,
        // 各段落间的额外空白行数: 0,
    })

    const {
        // 整体缩进级数,
        整体缩进之文本,
        // 列表符号,
        // 首层缩进之文本,
        首层缩进之文本_并含整体缩进,
        // 首层缩进之文本_含列表符号,
        首层缩进之文本_含列表符号_并含整体缩进,
        非首层缩进之文本,
        // 各段落间的额外空白行数,
    } = 最终采纳的排版配置

    console.info(`\n${
        本工具集一切命令行消息之前缀
    }\n\n《${
        粉笔工具.bgGreenBright.black(' 简介 ')
    }》\n\n${
        排版后的描述文本全文
    }\n\n${
        整体缩进之文本
    }应用示例：\n\n${
        首层缩进之文本_含列表符号_并含整体缩进
    }PowerShell ：\n${
        首层缩进之文本_并含整体缩进}${非首层缩进之文本
    }${
        粉笔工具.cyanBright('<本工具集之根文件夹>.\\用于研发阶段的命令行工具集\\PowerShell\\Push-将代码依次推送至多个集得源.ps1')
    }\n\n${
        首层缩进之文本_含列表符号_并含整体缩进
    }bash ：\n${
        首层缩进之文本_并含整体缩进}${非首层缩进之文本
    }${
        粉笔工具.yellowBright('<本工具集之根文件夹>./用于研发阶段的命令行工具集/bash/push-将代码依次推送至多个集得源.sh')
    }\n`)
}
